---
# defaults file for ansible-role-openio-haproxy

haproxy_conf_template: haproxy.cfg.j2
haproxy_conf_path: /etc/haproxy/haproxy.cfg

haproxy_logs_directory: /var/log/haproxy
haproxy_logs_facility: 5

# Sysctl configuration
haproxy_sysctl_managed: true
haproxy_sysctl_template_dest: /etc/sysctl.d/49-haproxy.conf
haproxy_sysctl_entries:
  net.ipv4.ip_forward: 1
  net.ipv4.ip_nonlocal_bind: 1

# Rsyslog configuration
haproxy_rsyslog_managed: true
haproxy_rsyslog_service_name: rsyslog
haproxy_rsyslog_conf_template: rsyslog_haproxy.conf.j2
haproxy_rsyslog_conf_path: /etc/rsyslog.d/49-haproxy.conf

# Logrotate configuration
haproxy_logrotate_managed: true
haproxy_logrotate_conf_template: logrotate_haproxy.conf.j2
haproxy_logrotate_template_conf_path: /etc/logrotate.d/haproxy
haproxy_logrotate_retention: 5

# provision only to prevent restart/reload of the service
haproxy_provision_only: false


##### HAproxy configuration file
# Global
haproxy_global_log_socket: 127.0.0.1
haproxy_global_log_facility: local5
haproxy_global_log_level: info

haproxy_global_chroot: /var/lib/haproxy

haproxy_global_user: haproxy
haproxy_global_group: haproxy

haproxy_global_stats_socket: /run/haproxy/stats.sock mode 0660 level admin
haproxy_global_stats_timeout: 30s

haproxy_global_ca_base: /etc/ssl/certs
haproxy_global_crt_base: /etc/ssl/private

haproxy_global_ssl_default_bind_ciphers:
  "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:\
  ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:\
  ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256"
haproxy_global_ssl_default_bind_options: "no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets"
haproxy_global_ssl_default_server_ciphers:
  "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:\
  ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:\
  ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256"
haproxy_global_ssl_default_server_options: no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets


# Defaults
haproxy_defaults_log: global
haproxy_defaults_unique_id_format: "%{+X}o\\ %ci:%cp_%fi:%fp_%Ts_%rt:%pid"
haproxy_defaults_unique_id_header: "X-Unique-ID"
haproxy_default_mode: http
haproxy_virtual_address: "{{ openio_bind_virtual_address | d('172.17.0.100') }}"

haproxy_default_options:
  - httplog clf
  - dontlognull
  # - forwardfor
  - log-separate-errors
  - log-health-checks
  - http-server-close

haproxy_defaults_errorfiles:
  - "400 {{ haproxy_errors_dir }}/400.http"
  - "403 {{ haproxy_errors_dir }}/403.http"
  - "408 {{ haproxy_errors_dir }}/408.http"
  - "500 {{ haproxy_errors_dir }}/500.http"
  - "502 {{ haproxy_errors_dir }}/502.http"
  - "503 {{ haproxy_errors_dir }}/503.http"
  - "504 {{ haproxy_errors_dir }}/504.http"

haproxy_defaults_timeouts:
  - connect 5s
  - client  60s
  - server  60s
  - http-request 15s
  - queue 1m
  - http-keep-alive 10s
  - check 10s
  - tunnel 1h

haproxy_listen_instances:
  - name: "stats"
    bind: "{{ haproxy_stats_address }}:{{ haproxy_stats_port }}"
    mode: http
    balance: []
    stats:
      - enable
      - "uri {{ haproxy_stats_path }}"
      - "realm Haproxy\\ Statistics"
      - "auth {{ haproxy_stats_login }}:{{ haproxy_stats_password }}"
      - "admin if TRUE"
    timeout:
      - "client 5000"
      - "connect 4000"
      - "server 30000"

haproxy_frontend_certbot:
  # CERTBOT
  name: "http-in-certbot"
  mode: http
  bind: "*:80"
  option:
    - "forwardfor header X-Originating-IP if-none"
  acl:
    - "is_certbot path_beg -i /.well-known/acme-challenge"
  rspadd:
    - "\"Strict-Transport-Security: max-age=31536000; includeSubDomains; preload\""
    - "\"X-Frame-Options: DENY\""
  use_backend:
    - "certbot if is_certbot"

haproxy_frontend_instances:
  # SWIFT PUBLIC
  - name: "swift-public"
    mode: http
    bind: "{{ haproxy_swift_public_frontend_bind }}"
    log-format: "{{ haproxy_log_format_https }}"
    unique-id-format: "{{ haproxy_defaults_unique_id_format }}"
    unique-id-header: "{{ haproxy_defaults_unique_id_header }}"
    ? "acl METH_PUT method PUT \n
      # Fix Eventlet 'Expect' header handling with uppercase '100-Continue' \n
      # https://github.com/eventlet/eventlet/pull/523 \n
      acl header_expect_exists req.hdr(Expect) -m found \n
      http-request replace-header Expect ^(.*)-Continue$ \\1-continue if METH_PUT header_expect_exists \n
      # Set 'Content-Length' header to 0 in PUT requests when not present \n
      acl header_content_length_exists    req.hdr(Content-Length) -m found \n
      acl header_transfer_encoding_exists req.hdr(Transfer-Encoding) -m found \n
      http-request set-header Content-Length 0 if METH_PUT
        !header_content_length_exists !header_transfer_encoding_exists \n
      reqadd X-Forwarded-Proto:\\"
    : "{{ haproxy_swift_public_frontend_proto }}"
    option:
      - "forwardfor"
    capture:
      - "request header Host len 60"
      - "request header X-Unique-ID len 46"
      - "request header X-Client-IP len 24"
    default_backend: "swift-backend"
  # KEYSTONE ADMIN
  - name: "keystone-admin"
    mode: http
    bind: "{{ haproxy_keystone_admin_frontend_bind }}"
    log-format: "{{ haproxy_log_format_https }}"
    unique-id-format: "{{ haproxy_defaults_unique_id_format }}"
    unique-id-header: "{{ haproxy_defaults_unique_id_header }}"
    option:
      - "forwardfor"
    capture:
      - "request header Host len 60"
      - "request header X-Unique-ID len 46"
      - "request header X-Client-IP len 24"
    reqadd:
      - "X-Forwarded-Proto:\\ {{ haproxy_keystone_admin_frontend_proto }}"
    default_backend: "keystone-admin-backend"
  # KEYSTONE PUBLIC
  - name: "keystone-public"
    mode: http
    bind: "{{ haproxy_keystone_public_frontend_bind }}"
    unique-id-format: "{{ haproxy_defaults_unique_id_format }}"
    unique-id-header: "{{ haproxy_defaults_unique_id_header }}"
    log-format: "{{ haproxy_log_format_https }}"
    option:
      - "forwardfor"
    capture:
      - "request header Host len 60"
      - "request header X-Unique-ID len 46"
      - "request header X-Client-IP len 24"
    reqadd:
      - "X-Forwarded-Proto:\\ {{ haproxy_keystone_public_frontend_proto }}"
    default_backend: "keystone-public-backend"
  # CONSCIENCE
  - name: "conscience"
    mode: tcp
    bind: "{{ haproxy_conscience_frontend_bind }} name conscience"
    log-format: "{{ haproxy_log_format_tcp }}"
    default_backend: "conscience-backend"

haproxy_certbot_backend:
  # CERTBOT
  name: certbot
  mode: http
  server:
    - "certbot 127.0.0.1:8000"

haproxy_backend_instances:
  # SWIFT PUBLIC
  - name: swift-backend
    mode: http
    balance: roundrobin
    server: "{{ haproxy_swift_backend_url | list_backends(name='swift-proxy', check='5s') }}"
  # KEYSTONE ADMIN
  - name: keystone-admin-backend
    mode: http
    balance: roundrobin
    server: "{{ haproxy_keystone_admin_backend_url | list_backends(name='keystone-admin', check='5s') }}"
    # This needs to be passed as is (rawx HTTP packet), so we cant use multiline easily without breaking it.
    # yamllint disable-line rule:line-length
    option: 'httpchk POST /v3/auth/tokens HTTP/1.1\r\nContent-Type:\ application/json\r\nContent-Length:\ 140\r\n\r\n{"auth":{"identity":{"methods":["password"],"password":{"user":{"name":"h34lthch3ck","domain":{"id":"default"},"password":"h34lthch3ck"}}}}}'
    http-check: "expect status 401"
  # KEYSTONE PUBLIC
  - name: keystone-public-backend
    mode: http
    balance: roundrobin
    server: "{{ haproxy_keystone_public_backend_url | list_backends(name='keystone-public', check='5s') }}"
    # yamllint disable-line rule:line-length
    option: 'httpchk POST /v3/auth/tokens HTTP/1.1\r\nContent-Type:\ application/json\r\nContent-Length:\ 140\r\n\r\n{"auth":{"identity":{"methods":["password"],"password":{"user":{"name":"h34lthch3ck","domain":{"id":"default"},"password":"h34lthch3ck"}}}}}'
    http-check: "expect status 401"
  # CONSCIENCE
  - name: conscience-backend
    mode: tcp
    option:
      - "tcp-check"
    server: "{{ haproxy_conscience_backend_url | list_backends(name='conscience', active=1, check='5s') }}"

### backward compat
# Stats
haproxy_stats_address: 127.0.0.1
haproxy_stats_port: 9000
haproxy_stats_path: /stats
haproxy_stats_login: admin
haproxy_stats_password: "{{ openio_haproxy_password | d('HA_PASS') }}"

### Loadbalancing configurations
# CERTBOT
haproxy_certbot_frontend: false
# OpenIO Swift proxy
#haproxy_swift_frontend: false
haproxy_swift_public_frontend_bind: "{{ haproxy_virtual_address }}:6007"
#haproxy_swift_public_frontend_bind: 0.0.0.0:443 ssl crt /etc/letsencrypt/live/swift.openio.io/fullchain.pem
haproxy_swift_private_frontend_bind: "{{ haproxy_virtual_address }}:6007"
haproxy_swift_inventory_groupname: oioswift
haproxy_swift_backend_url: "{{ (groups[haproxy_swift_inventory_groupname] \
  | map('extract', hostvars, ['openio_bind_address'])\
  | map('regex_replace', '$', ':6007') \
  | list) if haproxy_swift_inventory_groupname in groups \
  else \
  ansible_default_ipv4.address ~ ':6007' }}"
# Openstack Keystone
#haproxy_keystone_frontend: false
haproxy_keystone_admin_frontend_bind: "{{ haproxy_virtual_address }}:35357"
#haproxy_keystone_admin_frontend_bind: 0.0.0.0:35357 ssl crt /etc/letsencrypt/live/keystone.openio.io/fullchain.pem
haproxy_keystone_inventory_groupname: keystone
haproxy_keystone_admin_backend_url: "{{ (groups[haproxy_keystone_inventory_groupname] \
  | map('extract', hostvars, ['openio_bind_address'])\
  | map('regex_replace', '$', ':35357') \
  | list) if haproxy_swift_inventory_groupname in groups \
  else \
  ansible_default_ipv4.address ~ ':35357' }}"
haproxy_keystone_public_frontend_bind: "{{ haproxy_virtual_address }}:5000"
haproxy_keystone_public_backend_url: "{{ (groups[haproxy_keystone_inventory_groupname] \
  | map('extract', hostvars, ['openio_bind_address'])\
  | map('regex_replace', '$', ':5000') \
  | list) if haproxy_swift_inventory_groupname in groups \
  else \
  ansible_default_ipv4.address ~ ':5000' }}"

# OpenIO Conscience
#haproxy_conscience_frontend: false
haproxy_conscience_inventory_groupname: conscience
haproxy_conscience_frontend_bind: "{{ haproxy_virtual_address }}:6000"
haproxy_conscience_backend_url: "{{ (groups[haproxy_conscience_inventory_groupname] \
  | map('extract', hostvars, ['openio_bind_address'])\
  | map('regex_replace', '$', ':6000') \
  | list) if haproxy_swift_inventory_groupname in groups \
  else \
  ansible_default_ipv4.address ~ ':6000' }}"
haproxy_swift_public_frontend_proto: http
haproxy_swift_private_frontend_proto: http
haproxy_keystone_admin_frontend_proto: http
haproxy_keystone_public_frontend_proto: http
...
